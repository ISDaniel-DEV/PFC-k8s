document.addEventListener('DOMContentLoaded', function () {
    const tagInput = document.getElementById('tagInput');
    const tagsContainer = document.getElementById('tagsContainer');
    const tagsPreview = document.getElementById('tagsPreview');
    const suggestionsContainer = document.getElementById('suggestions');

    let subir = document.getElementById("subir");

    subir.addEventListener("click", function () {
        window.location.href = "publicar";
    })

    if (!logeado1) {
        window.location.href = "index";
    }

    // Etiquetas sugeridas (puedes reemplazar esto con una llamada a tu API)
    const suggestedTags = [
        'diseño', 'web', 'app', 'ui', 'ux', 'ilustración',
        'gráficos', 'tipografía', 'logo', 'marca', '3d',
        'animación', 'fotografía', 'arte', 'digital', 'impresión'
    ];

    let selectedTags = [];

    // Mostrar sugerencias cuando el input tiene foco
    tagInput.addEventListener('focus', showSuggestions);

    // Ocultar sugerencias al hacer clic fuera
    document.addEventListener('click', function (e) {
        if (!tagsContainer.contains(e.target)) {
            suggestionsContainer.classList.remove('visible');
        }
    });

    // Manejar la entrada de etiquetas
    tagInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter' || e.key === ',') {
            e.preventDefault();
            const tag = tagInput.value.trim().toLowerCase();
            if (tag && !selectedTags.includes(tag)) {
                addTag(tag);
                tagInput.value = '';
            }
        } else if (e.key === 'Backspace' && !tagInput.value) {
            // Eliminar la última etiqueta al presionar Backspace con el campo vacío
            const tags = document.querySelectorAll('.tag-item');
            if (tags.length > 0) {
                const lastTag = tags[tags.length - 1];
                removeTag(lastTag.textContent.trim().slice(0, -1)); // Eliminar el × del final
            }
        }
        showSuggestions();
    });

    // Función para mostrar sugerencias
    function showSuggestions() {
        const input = tagInput.value.toLowerCase();
        suggestionsContainer.innerHTML = '';

        if (!input) {
            suggestionsContainer.classList.remove('visible');
            return;
        }

        const filtered = suggestedTags
            .filter(tag => tag.includes(input) && !selectedTags.includes(tag))
            .slice(0, 5); // Mostrar máximo 5 sugerencias

        if (filtered.length === 0) {
            suggestionsContainer.classList.remove('visible');
            return;
        }

        filtered.forEach(tag => {
            const div = document.createElement('div');
            div.className = 'suggestion-item';
            div.textContent = tag;
            div.addEventListener('click', () => {
                addTag(tag);
                tagInput.value = '';
                suggestionsContainer.classList.remove('visible');
                tagInput.focus();
            });
            suggestionsContainer.appendChild(div);
        });

        suggestionsContainer.classList.add('visible');
    }

    // Función para añadir una etiqueta
    function addTag(tag) {
        if (!tag || selectedTags.includes(tag)) return;

        selectedTags.push(tag);
        updateTagsDisplay();

        // Crear elemento de etiqueta
        const tagElement = document.createElement('div');
        tagElement.className = 'tag-item';
        tagElement.innerHTML = `
            ${tag}
            <span class="tag-remove">&times;</span>
        `;

        // Insertar antes del input
        tagsContainer.insertBefore(tagElement, tagsContainer.querySelector('.tags-input-wrapper'));

        // Añadir evento para eliminar la etiqueta
        tagElement.querySelector('.tag-remove').addEventListener('click', (e) => {
            e.stopPropagation();
            removeTag(tag);
        });

        // Actualizar vista previa
        updatePreview();
    }

    // Función para eliminar una etiqueta
    function removeTag(tag) {
        selectedTags = selectedTags.filter(t => t !== tag);
        updateTagsDisplay();
        updatePreview();
    }

    // Función para actualizar la visualización de etiquetas
    function updateTagsDisplay() {
        const tagElements = document.querySelectorAll('.tag-item');
        tagElements.forEach(el => {
            const tagText = el.textContent.trim().slice(0, -1); // Eliminar el ×
            if (!selectedTags.includes(tagText)) {
                el.remove();
            }
        });
    }

    // Función para actualizar la vista previa
    function updatePreview() {
        tagsPreview.innerHTML = selectedTags.length > 0
            ? selectedTags.map(tag =>
                `<span class="tag-preview">${tag}</span>`
            ).join('')
            : '<p>No hay etiquetas seleccionadas</p>';
    }

    // Función para obtener los parámetros de la URL
    function getUrlParams() {
        const params = new URLSearchParams(window.location.search);
        const data = {};

        // Obtener los datos de la publicación de la URL
        const titulo = params.get('titulo');
        const descripcion = params.get('descripcion');
        const imagenPortada = params.get('imagenPortada');
        const archivos = params.get('archivos');

        if (titulo) data.titulo = decodeURIComponent(titulo);
        if (descripcion) data.descripcion = decodeURIComponent(descripcion);
        if (imagenPortada) data.imagenPortada = decodeURIComponent(imagenPortada);
        if (archivos) data.archivos = JSON.parse(decodeURIComponent(archivos));

        return data;
    }

    // Manejar el botón de publicar
    document.getElementById('publicar').addEventListener('click', async function () {
        if (selectedTags.length === 0) {
            alert('Por favor, añade al menos una etiqueta a tu publicación.');
            return;
        }

        try {
            // Mostrar indicador de carga
            const publicarBtn = document.getElementById('publicar');
            const originalBtnText = publicarBtn.textContent;
            publicarBtn.disabled = true;
            publicarBtn.textContent = 'Publicando...';

            // Obtener los datos de la publicación de la URL
            const publicacionData = getUrlParams();

            // Crear FormData para el envío de archivos
            const formData = new FormData();
            
            // Agregar campos de texto
            formData.append('titulo', publicacionData.titulo || 'Sin título');
            formData.append('descripcion', publicacionData.descripcion || '');
            formData.append('idAutor', 1); // TODO: Obtener el ID del usuario autenticado
            formData.append('nombre', publicacionData.titulo || 'Sin título');
            
            // Agregar etiquetas como string separado por comas
            if (selectedTags.length > 0) {
                formData.append('tags', selectedTags.join(','));
            }
            
            // Agregar archivos si existen
            if (publicacionData.archivos && publicacionData.archivos.length > 0) {
                publicacionData.archivos.forEach((file, index) => {
                    formData.append('archivos', file);
                });
            }
            
            // Agregar imagen de portada si existe
            if (publicacionData.imagenPortada) {
                // Asumiendo que imagenPortada es un objeto File
                formData.append('portada', publicacionData.imagenPortada);
            }
            
            // Construir la URL base
            const baseUrl = window.location.origin;
            // Cambiar la URL al endpoint correcto de Spring Boot
            const apiUrl = `${baseUrl}/api/publicaciones`;
            
            console.log('Enviando publicación a:', apiUrl);
            console.log('Datos de la publicación:', Object.fromEntries(formData));
            
            // Enviar la publicación al backend
            const response = await fetch(apiUrl, {
                method: 'POST',
                body: formData,
                // No establecer Content-Type, el navegador lo hará automáticamente con el boundary
                credentials: 'include' // Incluir credenciales si es necesario
            });
            
            console.log('Respuesta del servidor:', response);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error al guardar la publicación');
            }

            const result = await response.json();
            console.log('Publicación guardada:', result);

            // Mostrar mensaje de éxito y redirigir
            alert('¡Publicación creada con éxito!');
            window.location.href = 'index.html';

        } catch (error) {
            console.error('Error al guardar la publicación:', error);
            alert(`Error al guardar la publicación: ${error.message}`);

            // Restaurar el botón
            const publicarBtn = document.getElementById('publicar');
            publicarBtn.disabled = false;
            publicarBtn.textContent = originalBtnText;
        }
    });

    // Manejar el botón de atrás
    document.getElementById('anterior').addEventListener('click', function () {
        window.history.back();
    });
});
